# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'home.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets, QtSerialPort
from PyQt5.QtCore import QEvent
from pynput.keyboard import Key, Controller, Listener
import time
import sys

# #Import different sections back and front ends
# sys.path.append('Home')
# import main

sys.path.append('Exercise')
import exer_home

sys.path.append('Squat')
import squats

sys.path.append('StepUp')
import step_up

sys.path.append('LegLift')
import lift

sys.path.append('LegExtend')
import extensions

sys.path.append('Calibration')
import calibration

sys.path.append('Congrats')
import congrats
#todo: Import Progress (low prio)


#Goals + Parameters
tolerance = 6
squatReps = 1 #TODO: change to regular value of 12 when done testing
squatDur = 2
stepUpReps = 2
stepUpDur = 1.5
legLiftReps = 2
legLiftDur = 4
legExtReps = 4
legExtDur = 2

#Variables
cap = ""
deg = ""
maxLegBend = ""
minLegBend = ""
uiState = 0
calibrateState = 0
exercises = ["Squat", "Step Ups", "Leg Lifts", "Leg Extensions"]
eIndex = -1

class Ui_Form(object):

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1500, 1000)
        Form.setStyleSheet("background: url(:/images/home.JPG);")
        self.how_to = QtWidgets.QLabel(Form)
        self.how_to.setGeometry(QtCore.QRect(530, 130, 441, 61))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(40)
        self.how_to.setFont(font)
        self.how_to.setStyleSheet("background-image: url(:/images/transparent.png);")
        self.how_to.setObjectName("how_to")
        self.welcome = QtWidgets.QLabel(Form)
        self.welcome.setGeometry(QtCore.QRect(1020, 80, 441, 61))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(40)
        self.welcome.setFont(font)
        self.welcome.setStyleSheet("background-image: url(:/images/transparent.png);")
        self.welcome.setAlignment(QtCore.Qt.AlignCenter)
        self.welcome.setObjectName("welcome")
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(550, 210, 421, 511))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(30)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("background-image: url(:/images/transparent.png);")
        self.label_3.setWordWrap(True)
        self.label_3.setObjectName("label_3")
        self.cal_btn = QtWidgets.QPushButton(Form)
        self.cal_btn.setGeometry(QtCore.QRect(1110, 220, 251, 101))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(25)
        self.cal_btn.setFont(font)
        self.cal_btn.setStyleSheet("background-color: rgb(238, 17, 51);\n"
"background-image: url(:/images/transparent.png);\n"
"color: rgb(255, 255, 255);")
        self.cal_btn.setObjectName("cal_btn")
        self.prog_btn = QtWidgets.QPushButton(Form)
        self.prog_btn.setGeometry(QtCore.QRect(1110, 380, 251, 101))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(25)
        self.prog_btn.setFont(font)
        self.prog_btn.setStyleSheet("background-color: rgb(238, 17, 51);\n"
"background-image: url(:/images/transparent.png);\n"
"color: rgb(255, 255, 255);")
        self.prog_btn.setObjectName("prog_btn")
        self.exercise_btn = QtWidgets.QPushButton(Form)
        self.exercise_btn.setGeometry(QtCore.QRect(1110, 540, 251, 101))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(25)
        self.exercise_btn.setFont(font)
        self.exercise_btn.setStyleSheet("background-color: rgb(238, 17, 51);\n"
"background-image: url(:/images/transparent.png);\n"
"color: rgb(255, 255, 255);")
        self.exercise_btn.setObjectName("exercise_btn")
        self.exit_btn = QtWidgets.QPushButton(Form)
        self.exit_btn.setGeometry(QtCore.QRect(1110, 700, 251, 101))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(25)
        self.exit_btn.setFont(font)
        self.exit_btn.setStyleSheet("background-color: rgb(238, 17, 51);\n"
"background-image: url(:/images/transparent.png);\n"
"color: rgb(255, 255, 255);")
        self.exit_btn.setObjectName("exit_btn")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        self.action_items()
        self.serial = QtSerialPort.QSerialPort(
            'COM3',
            baudRate=QtSerialPort.QSerialPort.Baud115200,
            readyRead=self.receive
        )

        if not self.serial.isOpen():
            if not self.serial.open(QtCore.QIODevice.ReadWrite):
                print("Serial Started")

    def receive(self):
        global deg, cap, uiState, minLegBend
        while self.serial.canReadLine():
            text = self.serial.readLine().data().decode()
            text = text.rstrip('\r\n')
            tempText = text.rsplit(" ")

            # print(text)

            type = tempText[0]
            value = tempText[1]

            if type[0] == 'B':
                deg = value.split(".")[0]
                #This normalizes the values to be around 0-90 degs
                deg = str((int(deg) - 160)/(550-160)*90).split(".")[0]
                # print(deg)
                self.receiveActionsDeg(deg)
            elif type[0] == 'C':
                cap = value
                # print(cap)
                self.receiveActionsCap(cap)

            # print("UI STATE: " + str(uiState))

    def receiveActionsDeg(self, deg):
        global uiState

        # print(uiState)
        if uiState == 0: # home state no actions
            print("home")
        elif uiState == 1: # calibration state just display calibration val on screen
            self.calibrate(deg)
        elif uiState == 2: # exercise state choose, no actions
            print("nada")
        elif uiState == 3: # squat state - calculations
            squat_ui.squats(squat_ui, deg)
            if squat_ui.celebrateCheck():
                squat_ui.zeroCelebrate()
                self.goCelebrate()
        elif uiState == 4: # step up state - calculations
            step_up_ui.stepUps(step_up_ui, deg)
            if step_up_ui.celebrateCheck():
                step_up_ui.zeroCelebrate()
                self.goCelebrate()
        elif uiState == 5: # leg lift state - calculations
            leg_lift_ui.lifts(leg_lift_ui, deg, "-1")
            if leg_lift_ui.celebrateCheck():
                leg_lift_ui.zeroCelebrate()
                self.goCelebrate()
        elif uiState == 6: # leg lift state - calculations
            leg_extend_ui.extensions(leg_extend_ui, deg)
            if leg_extend_ui.celebrateCheck():
                leg_extend_ui.zeroCelebrate()
                self.goCelebrate()

    def receiveActionsCap(self, cap):
        global uiState, eIndex, exercises
        if uiState == 0:
            if cap == "0":
                self.goCalibrate()
            # elif cap == "1":
            #     self.goExercise()
            #     # print("TEST")
        elif uiState == 1:
            if cap == "0":
                self.setCalibrate()
                # print("CALIBRATE")
            elif cap == "1":
                self.goExercise()
                # print("TEST")
        elif uiState == 2: # exercise state - Cycle through exercises with 0 and 1 cap sensor
            if cap == "0":
                eIndex = eIndex + 1
                if eIndex > 3:
                    eIndex = 0
                print(eIndex)
                print(exercises[eIndex])
                exer_ui.cycleExercise(exer_ui, str(exercises[eIndex]))
            elif cap == "1":
                if eIndex == 0:
                    self.goSquat()
                elif eIndex == 1:
                    self.goStep()
                elif eIndex == 2:
                    self.goLift()
                elif eIndex == 3:
                    self.goExtend()
        elif uiState == 5: #Leg Lifts
            leg_lift_ui.lifts(leg_lift_ui, minLegBend, cap)
        elif uiState == 7:
            if cap == "0":
                self.goHome()
            elif cap == "1":
                self.goExercise()
                # print("TEST")

        #TODO: add button functionality for exercise screen | Home Screen | Congrats Screen

    def action_items(self):
        #From this UI
        self.exercise_btn.clicked.connect(self.goExercise)
        self.cal_btn.clicked.connect(self.goCalibrate)
        self.exit_btn.clicked.connect(exit)
        # todo: Calibrate, Exit, Progress (low prio)

        #From Exercise UI
        exer_ui.squat_btn.clicked.connect(self.goSquat)
        exer_ui.step_btn.clicked.connect(self.goStep)
        exer_ui.lift_btn.clicked.connect(self.goLift)
        exer_ui.extend_btn.clicked.connect(self.goExtend)
        exer_ui.home_btn.clicked.connect(self.goHome)
        exer_ui.exit_btn.clicked.connect(exit)

        #From Calibrate UI
        cal_ui.set_btn.clicked.connect(self.setCalibrate)
        cal_ui.exit_btn.clicked.connect(self.goExercise)

        #From Congrats UI
        congrats_ui.home_btn.clicked.connect(self.goHome)
        congrats_ui.exercise_btn.clicked.connect(self.goExercise)
        congrats_ui.exit_btn.clicked.connect(exit)

        #From Progress UI?

    #TODO: UI Functionalities

    #Calibrate Functions
    def setCalibrate(self):
        global calibrateState, deg, minLegBend, maxLegBend
        if calibrateState == 0:
            maxLegBend = deg
            cal_ui.setCalibrate(cal_ui, calibrateState, maxLegBend)
            calibrateState = 1
        elif calibrateState == 1:
            minLegBend = deg
            if minLegBend < maxLegBend: #Error Checking
                cal_ui.setCalibrate(cal_ui, calibrateState, minLegBend)
            else:
                cal_ui.setCalibrate(cal_ui, 2, minLegBend)
            calibrateState = 0

    def calibrate(self, deg):
        cal_ui.curBendText.setText("Current Bend: " + deg)

    def checkCalibrate(self):
        global maxLegBend, minLegBend
        if maxLegBend == "" or minLegBend == "":
            print("Not Calibrated")
            return False
        else:
            if int(maxLegBend) > int(minLegBend):
                return True
            else:
                print("Max val lower than Min")
                return False

    #GO Functions
    def goHome(self):
        global uiState
        self.hideAll()
        uiState = 0
        Home_Form.show()
        print("Going HOME")

    def goCalibrate(self):
        global uiState
        self.hideAll()
        uiState = 1
        print(uiState)
        Calib_Form.show()
        print("Going to Calibration")

    def goExercise(self):
        global uiState
        if self.checkCalibrate():
            self.hideAll()
            uiState = 2
            Exercise_Form.show()
            print("Going to Exercise GUI")

    def goSquat(self):
        global uiState, minLegBend, maxLegBend, tolerance, squatReps
        if self.checkCalibrate():
            self.hideAll()
            squat_ui.setValues(squat_ui, maxLegBend, minLegBend, tolerance, squatReps, squatDur)
            uiState = 3
            Squat_Form.show()
            print("Going to Squat GUI")

    def goStep(self):
        global uiState, minLegBend, maxLegBend, tolerance, squatReps
        if self.checkCalibrate():
            uiState = 4
            self.hideAll()
            step_up_ui.setValues(step_up_ui, maxLegBend, minLegBend, tolerance, stepUpReps, stepUpDur)
            StepUp_Form.show()
            print("Going to Step Up GUI")

    def goLift(self):
        global uiState, minLegBend, maxLegBend, tolerance, squatReps
        if self.checkCalibrate():
            uiState = 5
            self.hideAll()
            leg_lift_ui.setValues(leg_lift_ui, maxLegBend, minLegBend, tolerance, legLiftReps, legLiftDur)
            LegLift_Form.show()
            print("Going to Leg Lift GUI")

    def goExtend(self):
        global uiState, minLegBend, maxLegBend, tolerance, squatReps
        if self.checkCalibrate():
            uiState = 6
            self.hideAll()
            leg_extend_ui.setValues(leg_extend_ui, maxLegBend, minLegBend, tolerance, legExtReps, legExtDur)
            LegExtend_Form.show()
            print("Going to Leg Extend GUI")

    def goCelebrate(self):
        global uiState
        uiState = 7
        self.hideAll()
        Congrats_Form.show()
        print("Going to Celebrate!")

    def hideAll(self):
        Home_Form.hide()
        Exercise_Form.hide()
        Squat_Form.hide()
        StepUp_Form.hide()
        LegLift_Form.hide()
        LegExtend_Form.hide()
        Calib_Form.hide()
        Congrats_Form.hide()
        #TODO: Hide Progress

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.how_to.setText(_translate("Form", "HOW TO USE APP"))
        self.welcome.setText(_translate("Form", "WELCOME"))
        self.label_3.setText(_translate("Form", "1. Calibrate your device\n"
"2. Set your knee\'s maximum bend angle\n"
"3. Start your workouts!"))
        self.cal_btn.setText(_translate("Form", "Calibrate"))
        self.prog_btn.setText(_translate("Form", "Progress"))
        self.exercise_btn.setText(_translate("Form", "Exercise"))
        self.exit_btn.setText(_translate("Form", "Exit"))

import resources_rc_Home

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    # print(SquatExercise.squatRep(200, 100, 110, 10, 2))

    # Calibrate
    Calib_Form = QtWidgets.QWidget()
    cal_ui = calibration.Ui_Form()
    cal_ui.setupUi(Calib_Form)

    #Exercises
    Exercise_Form = QtWidgets.QWidget()
    exer_ui = exer_home.Ui_Form()
    exer_ui.setupUi(Exercise_Form)

    #Squats
    Squat_Form = QtWidgets.QWidget()
    squat_ui = squats.Ui_Form()
    squat_ui.setupUi(Squat_Form)

    #Step Up
    StepUp_Form = QtWidgets.QWidget()
    step_up_ui = step_up.Ui_Form()
    step_up_ui.setupUi(StepUp_Form)

    #Leg_Lift
    LegLift_Form = QtWidgets.QWidget()
    leg_lift_ui = lift.Ui_Form()
    leg_lift_ui.setupUi(LegLift_Form)

    #Leg_Extend
    LegExtend_Form = QtWidgets.QWidget()
    leg_extend_ui = extensions.Ui_Form()
    leg_extend_ui.setupUi(LegExtend_Form)

    #Congrats
    Congrats_Form = QtWidgets.QWidget()
    congrats_ui = congrats.Ui_Form()
    congrats_ui.setupUi(Congrats_Form)

    #Progress

    #Home
    Home_Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Home_Form)


    Home_Form.show()
    sys.exit(app.exec_())

